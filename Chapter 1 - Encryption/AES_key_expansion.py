def xor(block1, block2):
    res_block = ""
    for i, j in zip(block1, block2):
        if i == j:
            res_block += "0"
        else:
            res_block += "1"
    return res_block


def scrumble(block):
    s_box = {
        ("00", "0000"): "0010",
        ("00", "0001"): "1100",
        ("00", "0010"): "0100",
        ("00", "0011"): "0001",
        ("00", "0100"): "0111",
        ("00", "0101"): "1010",
        ("00", "0110"): "1011",
        ("00", "0111"): "0110",
        ("00", "1000"): "1000",
        ("00", "1001"): "0101",
        ("00", "1010"): "0011",
        ("00", "1011"): "1111",
        ("00", "1100"): "1101",
        ("00", "1101"): "0000",
        ("00", "1110"): "1110",
        ("00", "1111"): "1001",

        ("01", "0000"): "1110",
        ("01", "0001"): "1011",
        ("01", "0010"): "0010",
        ("01", "0011"): "1100",
        ("01", "0100"): "0100",
        ("01", "0101"): "0111",
        ("01", "0110"): "1101",
        ("01", "0111"): "0001",
        ("01", "1000"): "0101",
        ("01", "1001"): "0000",
        ("01", "1010"): "1111",
        ("01", "1011"): "1010",
        ("01", "1100"): "0011",
        ("01", "1101"): "1001",
        ("01", "1110"): "1000",
        ("01", "1111"): "0110",

        ("10", "0000"): "0100",
        ("10", "0001"): "0010",
        ("10", "0010"): "0001",
        ("10", "0011"): "1011",
        ("10", "0100"): "1010",
        ("10", "0101"): "1101",
        ("10", "0110"): "0111",
        ("10", "0111"): "1000",
        ("10", "1000"): "1111",
        ("10", "1001"): "1001",
        ("10", "1010"): "1100",
        ("10", "1011"): "0101",
        ("10", "1100"): "0110",
        ("10", "1101"): "0011",
        ("10", "1110"): "0000",
        ("10", "1111"): "1110",

        ("11", "0000"): "1011",
        ("11", "0001"): "1000",
        ("11", "0010"): "1100",
        ("11", "0011"): "0111",
        ("11", "0100"): "0001",
        ("11", "0101"): "1110",
        ("11", "0110"): "0010",
        ("11", "0111"): "1101",
        ("11", "1000"): "0110",
        ("11", "1001"): "1111",
        ("11", "1010"): "0000",
        ("11", "1011"): "1001",
        ("11", "1100"): "1010",
        ("11", "1101"): "0100",
        ("11", "1110"): "0101",
        ("11", "1111"): "0010",
    }

    outer_bits = block[0] + block[-1]
    inner_bits = block[1:-1]

    return "00" + s_box[(outer_bits, inner_bits)]


def key_expansion(block1, block2, block3, block4):
    extra1 = scrumble(block4)
    block5 = xor(extra1, block1)
    block6 = xor(block5, block2)
    block7 = xor(block6, block3)
    block8 = xor(block7, block4)

    extra2 = scrumble(block8)
    block9 = xor(extra2, block5)
    block10 = xor(block9, block6)
    block11 = xor(block10, block7)
    block12 = xor(block11, block8)

    return block9, block10, block11, block12


if __name__ == "__main__":
    b1, b2, b3, b4 = key_expansion("011010", "011011", "011010", "011011")
    print("block1 :", b1)
    print("block2 :", b2)
    print("block3 :", b3)
    print("block4 :", b4)
